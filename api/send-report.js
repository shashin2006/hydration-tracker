const nodemailer = require('nodemailer');

// Create transporter
const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
        user: process.env.GMAIL_USER,
        pass: process.env.GMAIL_PASS
    }
});

// Email template function
function createEmailTemplate(reportData) {
    return `
        <!DOCTYPE html>
        <html>
        <head>
            <style>
                body { font-family: Arial, sans-serif; color: #333; line-height: 1.6; }
                .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 30px; color: white; text-align: center; }
                .content { padding: 25px; background: #ffffff; }
                .summary { background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0; }
                .goal-list { list-style: none; padding: 0; }
                .goal-item { padding: 12px 0; border-bottom: 1px solid #eee; }
                .completed { color: #27ae60; }
                .pending { color: #e74c3c; }
                .footer { text-align: center; padding: 20px; color: #7f8c8d; font-size: 12px; }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>üíß Hydration Report Submitted!</h1>
                <p>Your daily water intake tracking data has been recorded</p>
            </div>
            
            <div class="content">
                <div class="summary">
                    <h2>üìä Submission Summary</h2>
                    <p><strong>Date:</strong> ${reportData.date}</p>
                    <p><strong>Time:</strong> ${reportData.time}</p>
                    <p><strong>Location:</strong> ${reportData.location.city}, ${reportData.location.region}</p>
                    <p><strong>Completion:</strong> ${reportData.totalCompleted} of ${reportData.totalGoals} goals (${Math.round(reportData.percentage)}%)</p>
                </div>

                <h3>üíß Goal Status:</h3>
                <ul class="goal-list">
                    ${reportData.goals.map(goal => {
                        const [hours, minutes] = goal.time.split(':');
                        const hour = parseInt(hours);
                        const period = hour >= 12 ? 'PM' : 'AM';
                        const displayHour = hour % 12 || 12;
                        return `
                        <li class="goal-item">
                            <strong>${displayHour} ${period}:</strong> ${goal.label} - 
                            <span class="${goal.completed ? 'completed' : 'pending'}">
                                ${goal.completed ? '‚úÖ Completed' : '‚è≥ ' + goal.status}
                            </span>
                        </li>`;
                    }).join('')}
                </ul>
            </div>
            
            <div class="footer">
                <p>This email was automatically generated by HydraTrac System</p>
            </div>
        </body>
        </html>
    `;
}

module.exports = async (req, res) => {
    // Set CORS headers
    res.setHeader('Access-Control-Allow-Credentials', true);
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET,OPTIONS,PATCH,DELETE,POST,PUT');
    res.setHeader('Access-Control-Allow-Headers', 'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version');
    
    // Handle OPTIONS request for CORS preflight
    if (req.method === 'OPTIONS') {
        res.status(200).end();
        return;
    }
    
    if (req.method === 'POST') {
        try {
            const reportData = req.body;
            
            const mailOptions = {
                from: '"HydraTrac System" <hydratrac@gmail.com>',
                to: 'shashinrajkumar@gmail.com',
                subject: `üíß Hydration Report - ${reportData.date} - ${Math.round(reportData.percentage)}% Complete`,
                html: createEmailTemplate(reportData)
            };

            await transporter.sendMail(mailOptions);
            
            res.status(200).json({ 
                success: true, 
                message: 'Report submitted and email sent successfully'
            });
            
        } catch (error) {
            console.error('Error sending email:', error);
            res.status(500).json({ 
                success: false, 
                message: 'Failed to send email: ' + error.message
            });
        }
    } else {
        res.status(405).json({ message: 'Method not allowed' });
    }
};