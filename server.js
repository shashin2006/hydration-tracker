const express = require('express');
const nodemailer = require('nodemailer');
const cors = require('cors');
const bodyParser = require('body-parser');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(bodyParser.json());
app.use(express.static('public'));

// Email configuration with environment variables
const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
        user: process.env.EMAIL_USER,  // Use environment variable
        pass: process.env.EMAIL_PASS   // Use environment variable
    }
});


// Email template function - CORRECTED VERSION
function createEmailTemplate(reportData) {
    // Format time for display in email
    const formatTimeForEmail = (timeString) => {
        const [hours, minutes] = timeString.split(':');
        const hour = parseInt(hours);
        const period = hour >= 12 ? 'PM' : 'AM';
        const displayHour = hour % 12 || 12;
        return `${displayHour} ${period}`;
    };

    return `
        <!DOCTYPE html>
        <html>
        <head>
            <style>
                body { font-family: Arial, sans-serif; color: #333; line-height: 1.6; }
                .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 30px; color: white; text-align: center; }
                .content { padding: 25px; background: #ffffff; }
                .summary { background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0; }
                .goal-list { list-style: none; padding: 0; }
                .goal-item { padding: 12px 0; border-bottom: 1px solid #eee; }
                .completed { color: #27ae60; }
                .pending { color: #e74c3c; }
                .footer { text-align: center; padding: 20px; color: #7f8c8d; font-size: 12px; }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>üíß Hydration Report Submitted!</h1>
                <p>Your daily water intake tracking data has been recorded</p>
            </div>
            
            <div class="content">
                <div class="summary">
                    <h2>üìä Submission Summary</h2>
                    <p><strong>Date:</strong> ${reportData.date}</p>
                    <p><strong>Time:</strong> ${reportData.time}</p>
                    <p><strong>Location:</strong> ${reportData.location.city}, ${reportData.location.region}</p>
                    <p><strong>Completion:</strong> ${reportData.totalCompleted} of ${reportData.totalGoals} goals (${Math.round(reportData.percentage)}%)</p>
                </div>

                <h3>üíß Goal Status:</h3>
                <ul class="goal-list">
                    ${reportData.goals.map(goal => `
                        <li class="goal-item">
                            <strong>${formatTimeForEmail(goal.time)}:</strong> ${goal.label} - 
                            <span class="${goal.completed ? 'completed' : 'pending'}">
                                ${goal.completed ? '‚úÖ Completed' : '‚è≥ ' + goal.status}
                            </span>
                        </li>
                    `).join('')}
                </ul>
            </div>
            
            <div class="footer">
                <p>This email was automatically generated by HydraTrac System</p>
            </div>
        </body>
        </html>
    `;
}

// Test email connection
transporter.verify(function(error, success) {
    if (error) {
        console.log('Email connection error:', error);
    } else {
        console.log('Email server is ready to send messages');
    }
});

// API endpoint to send report email
app.post('/api/send-report', async (req, res) => {
    try {
        const reportData = req.body;
        console.log('Received report data');
        
        // Email options
        const mailOptions = {
            from: '"HydraTrac System" <hydratrac@gmail.com>',
            to: 'shashinrajkumar@gmail.com',
            subject: `üíß Hydration Report - ${reportData.date} - ${Math.round(reportData.percentage)}% Complete`,
            html: createEmailTemplate(reportData)
        };

        // Send email
        await transporter.sendMail(mailOptions);
        
        console.log('Email sent successfully');
        res.json({ 
            success: true, 
            message: 'Report submitted and email sent successfully'
        });
        
    } catch (error) {
        console.error('Error sending email:', error);
        res.status(500).json({ 
            success: false, 
            message: 'Failed to send email: ' + error.message
        });
    }
});

// Test endpoint
app.get('/api/test', (req, res) => {
    res.json({ message: 'Server is running!' });
});

// Serve the main page
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.listen(PORT, () => {
    console.log(`üöÄ Server running on http://localhost:${PORT}`);
}); 